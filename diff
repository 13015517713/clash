diff --git a/Makefile b/Makefile
index 02b3eea..80bad82 100644
--- a/Makefile
+++ b/Makefile
@@ -2,9 +2,9 @@ NAME=clash
 BINDIR=bin
 VERSION=$(shell git describe --tags || echo "unknown version")
 BUILDTIME=$(shell date -u)
-GOBUILD=CGO_ENABLED=0 go build -trimpath -ldflags '-X "github.com/Dreamacro/clash/constant.Version=$(VERSION)" \
+GOBUILD=CGO_ENABLED=0 go build -gcflags=all='-N -l' -ldflags '-X "github.com/Dreamacro/clash/constant.Version=$(VERSION)" \
 		-X "github.com/Dreamacro/clash/constant.BuildTime=$(BUILDTIME)" \
-		-s -w -buildid='
+		-buildid='
 
 PLATFORM_LIST = \
 	darwin-amd64 \
diff --git a/common/net/relay.go b/common/net/relay.go
index 99a0c6a..9d2f9a5 100644
--- a/common/net/relay.go
+++ b/common/net/relay.go
@@ -13,7 +13,7 @@ func Relay(leftConn, rightConn net.Conn) {
 	go func() {
 		// Wrapping to avoid using *net.TCPConn.(ReadFrom)
 		// See also https://github.com/Dreamacro/clash/pull/1209
-		_, err := io.Copy(WriteOnlyWriter{Writer: leftConn}, ReadOnlyReader{Reader: rightConn})
+		_, err := io.Copy(WriteOnlyWriter{Writer: leftConn}, ReadOnlyReader{Reader: rightConn}) // 这里是请求
 		leftConn.SetReadDeadline(time.Now())
 		ch <- err
 	}()
diff --git a/listener/listener.go b/listener/listener.go
index 972ca2d..21d78c7 100644
--- a/listener/listener.go
+++ b/listener/listener.go
@@ -70,6 +70,7 @@ func SetBindAddress(host string) {
 	bindAddress = host
 }
 
+// 创建http server
 func ReCreateHTTP(port int, tcpIn chan<- C.ConnContext) {
 	httpMux.Lock()
 	defer httpMux.Unlock()
diff --git a/log/log.go b/log/log.go
index ba706e5..499f979 100644
--- a/log/log.go
+++ b/log/log.go
@@ -12,12 +12,14 @@ import (
 var (
 	logCh  = make(chan any)
 	source = observable.NewObservable(logCh)
-	level  = INFO
+	level  = DEBUG
 )
 
 func init() {
+	fmt.Println("log init")
+	log.SetReportCaller(true)
 	log.SetOutput(os.Stdout)
-	log.SetLevel(log.DebugLevel)
+	log.SetLevel(log.TraceLevel)
 }
 
 type Event struct {
diff --git a/main.go b/main.go
old mode 100644
new mode 100755
index 3adfe3d..82ba557
--- a/main.go
+++ b/main.go
@@ -47,11 +47,14 @@ func init() {
 
 func main() {
 	maxprocs.Set(maxprocs.Logger(func(string, ...any) {}))
+
 	if version {
 		fmt.Printf("Clash %s %s %s with %s %s\n", C.Version, runtime.GOOS, runtime.GOARCH, runtime.Version(), C.BuildTime)
 		return
 	}
 
+	log.Infoln("here")
+
 	if homeDir != "" {
 		if !filepath.IsAbs(homeDir) {
 			currentDir, _ := os.Getwd()
@@ -60,6 +63,8 @@ func main() {
 		C.SetHomeDir(homeDir)
 	}
 
+	log.Infoln("here")
+
 	if configFile != "" {
 		if !filepath.IsAbs(configFile) {
 			currentDir, _ := os.Getwd()
@@ -75,6 +80,8 @@ func main() {
 		log.Fatalln("Initial configuration directory error: %s", err.Error())
 	}
 
+	log.Debugln("here")
+
 	if testConfig {
 		if _, err := executor.Parse(); err != nil {
 			log.Errorln(err.Error())
@@ -85,6 +92,8 @@ func main() {
 		return
 	}
 
+	log.Infoln("here")
+
 	var options []hub.Option
 	if flagset["ext-ui"] {
 		options = append(options, hub.WithExternalUI(externalUI))
@@ -100,7 +109,11 @@ func main() {
 		log.Fatalln("Parse config error: %s", err.Error())
 	}
 
+	log.Infoln("Clash is starting")
+
 	sigCh := make(chan os.Signal, 1)
 	signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)
 	<-sigCh
+
+	log.Infoln("Clash is stopping")
 }
